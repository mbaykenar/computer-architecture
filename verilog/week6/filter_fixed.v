// -------------------------------------------------------------
//
// Module: filter_fixed
// Generated by MATLAB(R) 9.5 and Filter Design HDL Coder 3.1.4.
// Generated on: 2023-04-22 00:49:08
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: filter_fixed
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 17
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s16,15 -> [-1 1)
// Filter Internals  : Full Precision
//   Output          : s32,30 -> [-2 2)  (auto determined)
//   Product         : s30,30 -> [-5.000000e-01 5.000000e-01)  (auto determined)
//   Accumulator     : s32,30 -> [-2 2)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter_fixed
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [31:0] filter_out; //sfix32_En30

////////////////////////////////////////////////////////////////
//Module Architecture: filter_fixed
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000001001000; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b1111111110101111; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b1111110100111100; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b1111100111001001; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b1111100110001000; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0000000101010100; //sfix16_En15
  parameter signed [15:0] coeff7 = 16'b0001000101000001; //sfix16_En15
  parameter signed [15:0] coeff8 = 16'b0010000111111000; //sfix16_En15
  parameter signed [15:0] coeff9 = 16'b0010100100101001; //sfix16_En15
  parameter signed [15:0] coeff10 = 16'b0010000111111000; //sfix16_En15
  parameter signed [15:0] coeff11 = 16'b0001000101000001; //sfix16_En15
  parameter signed [15:0] coeff12 = 16'b0000000101010100; //sfix16_En15
  parameter signed [15:0] coeff13 = 16'b1111100110001000; //sfix16_En15
  parameter signed [15:0] coeff14 = 16'b1111100111001001; //sfix16_En15
  parameter signed [15:0] coeff15 = 16'b1111110100111100; //sfix16_En15
  parameter signed [15:0] coeff16 = 16'b1111111110101111; //sfix16_En15
  parameter signed [15:0] coeff17 = 16'b0000000001001000; //sfix16_En15

  // Signals
  reg  signed [15:0] delay_pipeline [0:16] ; // sfix16_En15
  wire signed [29:0] product17; // sfix30_En30
  wire signed [31:0] mul_temp; // sfix32_En30
  wire signed [29:0] product16; // sfix30_En30
  wire signed [31:0] mul_temp_1; // sfix32_En30
  wire signed [29:0] product15; // sfix30_En30
  wire signed [31:0] mul_temp_2; // sfix32_En30
  wire signed [29:0] product14; // sfix30_En30
  wire signed [31:0] mul_temp_3; // sfix32_En30
  wire signed [29:0] product13; // sfix30_En30
  wire signed [31:0] mul_temp_4; // sfix32_En30
  wire signed [29:0] product12; // sfix30_En30
  wire signed [31:0] mul_temp_5; // sfix32_En30
  wire signed [29:0] product11; // sfix30_En30
  wire signed [31:0] mul_temp_6; // sfix32_En30
  wire signed [29:0] product10; // sfix30_En30
  wire signed [31:0] mul_temp_7; // sfix32_En30
  wire signed [29:0] product9; // sfix30_En30
  wire signed [31:0] mul_temp_8; // sfix32_En30
  wire signed [29:0] product8; // sfix30_En30
  wire signed [31:0] mul_temp_9; // sfix32_En30
  wire signed [29:0] product7; // sfix30_En30
  wire signed [31:0] mul_temp_10; // sfix32_En30
  wire signed [29:0] product6; // sfix30_En30
  wire signed [31:0] mul_temp_11; // sfix32_En30
  wire signed [29:0] product5; // sfix30_En30
  wire signed [31:0] mul_temp_12; // sfix32_En30
  wire signed [29:0] product4; // sfix30_En30
  wire signed [31:0] mul_temp_13; // sfix32_En30
  wire signed [29:0] product3; // sfix30_En30
  wire signed [31:0] mul_temp_14; // sfix32_En30
  wire signed [29:0] product2; // sfix30_En30
  wire signed [31:0] mul_temp_15; // sfix32_En30
  wire signed [31:0] product1_cast; // sfix32_En30
  wire signed [29:0] product1; // sfix30_En30
  wire signed [31:0] mul_temp_16; // sfix32_En30
  wire signed [31:0] sum1; // sfix32_En30
  wire signed [31:0] add_signext; // sfix32_En30
  wire signed [31:0] add_signext_1; // sfix32_En30
  wire signed [32:0] add_temp; // sfix33_En30
  wire signed [31:0] sum2; // sfix32_En30
  wire signed [31:0] add_signext_2; // sfix32_En30
  wire signed [31:0] add_signext_3; // sfix32_En30
  wire signed [32:0] add_temp_1; // sfix33_En30
  wire signed [31:0] sum3; // sfix32_En30
  wire signed [31:0] add_signext_4; // sfix32_En30
  wire signed [31:0] add_signext_5; // sfix32_En30
  wire signed [32:0] add_temp_2; // sfix33_En30
  wire signed [31:0] sum4; // sfix32_En30
  wire signed [31:0] add_signext_6; // sfix32_En30
  wire signed [31:0] add_signext_7; // sfix32_En30
  wire signed [32:0] add_temp_3; // sfix33_En30
  wire signed [31:0] sum5; // sfix32_En30
  wire signed [31:0] add_signext_8; // sfix32_En30
  wire signed [31:0] add_signext_9; // sfix32_En30
  wire signed [32:0] add_temp_4; // sfix33_En30
  wire signed [31:0] sum6; // sfix32_En30
  wire signed [31:0] add_signext_10; // sfix32_En30
  wire signed [31:0] add_signext_11; // sfix32_En30
  wire signed [32:0] add_temp_5; // sfix33_En30
  wire signed [31:0] sum7; // sfix32_En30
  wire signed [31:0] add_signext_12; // sfix32_En30
  wire signed [31:0] add_signext_13; // sfix32_En30
  wire signed [32:0] add_temp_6; // sfix33_En30
  wire signed [31:0] sum8; // sfix32_En30
  wire signed [31:0] add_signext_14; // sfix32_En30
  wire signed [31:0] add_signext_15; // sfix32_En30
  wire signed [32:0] add_temp_7; // sfix33_En30
  wire signed [31:0] sum9; // sfix32_En30
  wire signed [31:0] add_signext_16; // sfix32_En30
  wire signed [31:0] add_signext_17; // sfix32_En30
  wire signed [32:0] add_temp_8; // sfix33_En30
  wire signed [31:0] sum10; // sfix32_En30
  wire signed [31:0] add_signext_18; // sfix32_En30
  wire signed [31:0] add_signext_19; // sfix32_En30
  wire signed [32:0] add_temp_9; // sfix33_En30
  wire signed [31:0] sum11; // sfix32_En30
  wire signed [31:0] add_signext_20; // sfix32_En30
  wire signed [31:0] add_signext_21; // sfix32_En30
  wire signed [32:0] add_temp_10; // sfix33_En30
  wire signed [31:0] sum12; // sfix32_En30
  wire signed [31:0] add_signext_22; // sfix32_En30
  wire signed [31:0] add_signext_23; // sfix32_En30
  wire signed [32:0] add_temp_11; // sfix33_En30
  wire signed [31:0] sum13; // sfix32_En30
  wire signed [31:0] add_signext_24; // sfix32_En30
  wire signed [31:0] add_signext_25; // sfix32_En30
  wire signed [32:0] add_temp_12; // sfix33_En30
  wire signed [31:0] sum14; // sfix32_En30
  wire signed [31:0] add_signext_26; // sfix32_En30
  wire signed [31:0] add_signext_27; // sfix32_En30
  wire signed [32:0] add_temp_13; // sfix33_En30
  wire signed [31:0] sum15; // sfix32_En30
  wire signed [31:0] add_signext_28; // sfix32_En30
  wire signed [31:0] add_signext_29; // sfix32_En30
  wire signed [32:0] add_temp_14; // sfix33_En30
  wire signed [31:0] sum16; // sfix32_En30
  wire signed [31:0] add_signext_30; // sfix32_En30
  wire signed [31:0] add_signext_31; // sfix32_En30
  wire signed [32:0] add_temp_15; // sfix33_En30
  reg  signed [31:0] output_register; // sfix32_En30

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[16] * coeff17;
  assign product17 = mul_temp[29:0];

  assign mul_temp_1 = delay_pipeline[15] * coeff16;
  assign product16 = mul_temp_1[29:0];

  assign mul_temp_2 = delay_pipeline[14] * coeff15;
  assign product15 = mul_temp_2[29:0];

  assign mul_temp_3 = delay_pipeline[13] * coeff14;
  assign product14 = mul_temp_3[29:0];

  assign mul_temp_4 = delay_pipeline[12] * coeff13;
  assign product13 = mul_temp_4[29:0];

  assign mul_temp_5 = delay_pipeline[11] * coeff12;
  assign product12 = mul_temp_5[29:0];

  assign mul_temp_6 = delay_pipeline[10] * coeff11;
  assign product11 = mul_temp_6[29:0];

  assign mul_temp_7 = delay_pipeline[9] * coeff10;
  assign product10 = mul_temp_7[29:0];

  assign mul_temp_8 = delay_pipeline[8] * coeff9;
  assign product9 = mul_temp_8[29:0];

  assign mul_temp_9 = delay_pipeline[7] * coeff8;
  assign product8 = mul_temp_9[29:0];

  assign mul_temp_10 = delay_pipeline[6] * coeff7;
  assign product7 = mul_temp_10[29:0];

  assign mul_temp_11 = delay_pipeline[5] * coeff6;
  assign product6 = mul_temp_11[29:0];

  assign mul_temp_12 = delay_pipeline[4] * coeff5;
  assign product5 = mul_temp_12[29:0];

  assign mul_temp_13 = delay_pipeline[3] * coeff4;
  assign product4 = mul_temp_13[29:0];

  assign mul_temp_14 = delay_pipeline[2] * coeff3;
  assign product3 = mul_temp_14[29:0];

  assign mul_temp_15 = delay_pipeline[1] * coeff2;
  assign product2 = mul_temp_15[29:0];

  assign product1_cast = $signed({{2{product1[29]}}, product1});

  assign mul_temp_16 = delay_pipeline[0] * coeff1;
  assign product1 = mul_temp_16[29:0];

  assign add_signext = product1_cast;
  assign add_signext_1 = $signed({{2{product2[29]}}, product2});
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = add_temp[31:0];

  assign add_signext_2 = sum1;
  assign add_signext_3 = $signed({{2{product3[29]}}, product3});
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[31:0];

  assign add_signext_4 = sum2;
  assign add_signext_5 = $signed({{2{product4[29]}}, product4});
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[31:0];

  assign add_signext_6 = sum3;
  assign add_signext_7 = $signed({{2{product5[29]}}, product5});
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[31:0];

  assign add_signext_8 = sum4;
  assign add_signext_9 = $signed({{2{product6[29]}}, product6});
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[31:0];

  assign add_signext_10 = sum5;
  assign add_signext_11 = $signed({{2{product7[29]}}, product7});
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum6 = add_temp_5[31:0];

  assign add_signext_12 = sum6;
  assign add_signext_13 = $signed({{2{product8[29]}}, product8});
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum7 = add_temp_6[31:0];

  assign add_signext_14 = sum7;
  assign add_signext_15 = $signed({{2{product9[29]}}, product9});
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum8 = add_temp_7[31:0];

  assign add_signext_16 = sum8;
  assign add_signext_17 = $signed({{2{product10[29]}}, product10});
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum9 = add_temp_8[31:0];

  assign add_signext_18 = sum9;
  assign add_signext_19 = $signed({{2{product11[29]}}, product11});
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum10 = add_temp_9[31:0];

  assign add_signext_20 = sum10;
  assign add_signext_21 = $signed({{2{product12[29]}}, product12});
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum11 = add_temp_10[31:0];

  assign add_signext_22 = sum11;
  assign add_signext_23 = $signed({{2{product13[29]}}, product13});
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum12 = add_temp_11[31:0];

  assign add_signext_24 = sum12;
  assign add_signext_25 = $signed({{2{product14[29]}}, product14});
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sum13 = add_temp_12[31:0];

  assign add_signext_26 = sum13;
  assign add_signext_27 = $signed({{2{product15[29]}}, product15});
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sum14 = add_temp_13[31:0];

  assign add_signext_28 = sum14;
  assign add_signext_29 = $signed({{2{product16[29]}}, product16});
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sum15 = add_temp_14[31:0];

  assign add_signext_30 = sum15;
  assign add_signext_31 = $signed({{2{product17[29]}}, product17});
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sum16 = add_temp_15[31:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum16;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter_fixed

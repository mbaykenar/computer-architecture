// -------------------------------------------------------------
//
// Module: filter_da
// Generated by MATLAB(R) 9.5 and Filter Design HDL Coder 3.1.4.
// Generated on: 2023-04-22 01:06:19
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// TargetDirectory: hdlsrc_da
// Name: filter_da
// DALUTPartition: [6  6  5]
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Distributed arithmetic (DA)
// Folding Factor        : 16
// LUT Address Width     : 6
// Total LUT Size (bits) : 2336
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 17
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s16,15 -> [-1 1)
// Filter Internals  : Full Precision
//   Output          : s32,30 -> [-2 2)  (auto determined)
//   Product         : s30,30 -> [-5.000000e-01 5.000000e-01)  (auto determined)
//   Accumulator     : s32,30 -> [-2 2)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter_da
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [31:0] filter_out; //sfix32_En30

////////////////////////////////////////////////////////////////
//Module Architecture: filter_da
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000001001000; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b1111111110101111; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b1111110100111100; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b1111100111001001; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b1111100110001000; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0000000101010100; //sfix16_En15
  parameter signed [15:0] coeff7 = 16'b0001000101000001; //sfix16_En15
  parameter signed [15:0] coeff8 = 16'b0010000111111000; //sfix16_En15
  parameter signed [15:0] coeff9 = 16'b0010100100101001; //sfix16_En15
  parameter signed [15:0] coeff10 = 16'b0010000111111000; //sfix16_En15
  parameter signed [15:0] coeff11 = 16'b0001000101000001; //sfix16_En15
  parameter signed [15:0] coeff12 = 16'b0000000101010100; //sfix16_En15
  parameter signed [15:0] coeff13 = 16'b1111100110001000; //sfix16_En15
  parameter signed [15:0] coeff14 = 16'b1111100111001001; //sfix16_En15
  parameter signed [15:0] coeff15 = 16'b1111110100111100; //sfix16_En15
  parameter signed [15:0] coeff16 = 16'b1111111110101111; //sfix16_En15
  parameter signed [15:0] coeff17 = 16'b0000000001001000; //sfix16_En15

  // Signals
  wire signed [15:0] filter_in_cast; // sfix16_En15
  reg  [3:0] cur_count; // ufix4
  wire phase_15; // boolean
  wire phase_0; // boolean
  wire serialoutb1; // boolean
  reg  signed [15:0] shiftreg; // sfix16_En15
  reg  delay_pipeline [0:255] ; // boolean
  wire [5:0] mem_addr_1; // ufix6
  reg  signed [12:0] memoutb1_1; // sfix13_En15
  wire [5:0] mem_addr_2; // ufix6
  reg  signed [16:0] memoutb1_2; // sfix17_En15
  wire [4:0] mem_addr_3; // ufix5
  reg  signed [12:0] memoutb1_3; // sfix13_En15
  wire signed [16:0] memoutb1; // sfix17_En15
  wire signed [17:0] sum1_1; // sfix18_En15
  wire signed [16:0] add_signext; // sfix17_En15
  wire signed [16:0] add_signext_1; // sfix17_En15
  wire signed [18:0] sum2_1; // sfix19_En15
  wire signed [17:0] add_signext_2; // sfix18_En15
  wire signed [17:0] add_signext_3; // sfix18_En15
  reg  signed [32:0] acc_out; // sfix33_En30
  wire signed [32:0] memoutb1_cast; // sfix33_En30
  wire signed [32:0] add_sub_out; // sfix33_En30
  wire signed [32:0] acc_out_shft; // sfix33_En30
  wire signed [32:0] acc_in; // sfix33_En30
  wire signed [32:0] addsub_add; // sfix33_En30
  wire signed [32:0] addsub_sub; // sfix33_En30
  wire signed [32:0] add_signext_4; // sfix33_En30
  wire signed [32:0] add_signext_5; // sfix33_En30
  wire signed [33:0] add_temp; // sfix34_En30
  wire signed [32:0] sub_signext; // sfix33_En30
  wire signed [32:0] sub_signext_1; // sfix33_En30
  wire signed [33:0] sub_temp; // sfix34_En30
  reg  signed [32:0] final_acc_out; // sfix33_En30
  wire signed [32:0] output_da; // sfix33_En30
  wire signed [31:0] output_typeconvert; // sfix32_En30
  reg  signed [31:0] output_register; // sfix32_En30

  // Block Statements
  assign filter_in_cast = filter_in;

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 4'b1111;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 4'b1111) begin
            cur_count <= 4'b0000;
          end
          else begin
            cur_count <= cur_count + 4'b0001;
          end
        end
      end
    end // Counter_process

  assign  phase_15 = (cur_count == 4'b1111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 4'b0000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: Serializer_1_process
      if (reset == 1'b1) begin
        shiftreg <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (phase_15 == 1'b1) begin
            shiftreg <= filter_in_cast;
          end
          else begin
            shiftreg <= {1'b0, shiftreg[15 : 1]};
          end
        end
      end 
    end // Serializer_1_process;

  assign   serialoutb1=shiftreg[0];
 
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_1_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 1'b0;
        delay_pipeline[1] <= 1'b0;
        delay_pipeline[2] <= 1'b0;
        delay_pipeline[3] <= 1'b0;
        delay_pipeline[4] <= 1'b0;
        delay_pipeline[5] <= 1'b0;
        delay_pipeline[6] <= 1'b0;
        delay_pipeline[7] <= 1'b0;
        delay_pipeline[8] <= 1'b0;
        delay_pipeline[9] <= 1'b0;
        delay_pipeline[10] <= 1'b0;
        delay_pipeline[11] <= 1'b0;
        delay_pipeline[12] <= 1'b0;
        delay_pipeline[13] <= 1'b0;
        delay_pipeline[14] <= 1'b0;
        delay_pipeline[15] <= 1'b0;
        delay_pipeline[16] <= 1'b0;
        delay_pipeline[17] <= 1'b0;
        delay_pipeline[18] <= 1'b0;
        delay_pipeline[19] <= 1'b0;
        delay_pipeline[20] <= 1'b0;
        delay_pipeline[21] <= 1'b0;
        delay_pipeline[22] <= 1'b0;
        delay_pipeline[23] <= 1'b0;
        delay_pipeline[24] <= 1'b0;
        delay_pipeline[25] <= 1'b0;
        delay_pipeline[26] <= 1'b0;
        delay_pipeline[27] <= 1'b0;
        delay_pipeline[28] <= 1'b0;
        delay_pipeline[29] <= 1'b0;
        delay_pipeline[30] <= 1'b0;
        delay_pipeline[31] <= 1'b0;
        delay_pipeline[32] <= 1'b0;
        delay_pipeline[33] <= 1'b0;
        delay_pipeline[34] <= 1'b0;
        delay_pipeline[35] <= 1'b0;
        delay_pipeline[36] <= 1'b0;
        delay_pipeline[37] <= 1'b0;
        delay_pipeline[38] <= 1'b0;
        delay_pipeline[39] <= 1'b0;
        delay_pipeline[40] <= 1'b0;
        delay_pipeline[41] <= 1'b0;
        delay_pipeline[42] <= 1'b0;
        delay_pipeline[43] <= 1'b0;
        delay_pipeline[44] <= 1'b0;
        delay_pipeline[45] <= 1'b0;
        delay_pipeline[46] <= 1'b0;
        delay_pipeline[47] <= 1'b0;
        delay_pipeline[48] <= 1'b0;
        delay_pipeline[49] <= 1'b0;
        delay_pipeline[50] <= 1'b0;
        delay_pipeline[51] <= 1'b0;
        delay_pipeline[52] <= 1'b0;
        delay_pipeline[53] <= 1'b0;
        delay_pipeline[54] <= 1'b0;
        delay_pipeline[55] <= 1'b0;
        delay_pipeline[56] <= 1'b0;
        delay_pipeline[57] <= 1'b0;
        delay_pipeline[58] <= 1'b0;
        delay_pipeline[59] <= 1'b0;
        delay_pipeline[60] <= 1'b0;
        delay_pipeline[61] <= 1'b0;
        delay_pipeline[62] <= 1'b0;
        delay_pipeline[63] <= 1'b0;
        delay_pipeline[64] <= 1'b0;
        delay_pipeline[65] <= 1'b0;
        delay_pipeline[66] <= 1'b0;
        delay_pipeline[67] <= 1'b0;
        delay_pipeline[68] <= 1'b0;
        delay_pipeline[69] <= 1'b0;
        delay_pipeline[70] <= 1'b0;
        delay_pipeline[71] <= 1'b0;
        delay_pipeline[72] <= 1'b0;
        delay_pipeline[73] <= 1'b0;
        delay_pipeline[74] <= 1'b0;
        delay_pipeline[75] <= 1'b0;
        delay_pipeline[76] <= 1'b0;
        delay_pipeline[77] <= 1'b0;
        delay_pipeline[78] <= 1'b0;
        delay_pipeline[79] <= 1'b0;
        delay_pipeline[80] <= 1'b0;
        delay_pipeline[81] <= 1'b0;
        delay_pipeline[82] <= 1'b0;
        delay_pipeline[83] <= 1'b0;
        delay_pipeline[84] <= 1'b0;
        delay_pipeline[85] <= 1'b0;
        delay_pipeline[86] <= 1'b0;
        delay_pipeline[87] <= 1'b0;
        delay_pipeline[88] <= 1'b0;
        delay_pipeline[89] <= 1'b0;
        delay_pipeline[90] <= 1'b0;
        delay_pipeline[91] <= 1'b0;
        delay_pipeline[92] <= 1'b0;
        delay_pipeline[93] <= 1'b0;
        delay_pipeline[94] <= 1'b0;
        delay_pipeline[95] <= 1'b0;
        delay_pipeline[96] <= 1'b0;
        delay_pipeline[97] <= 1'b0;
        delay_pipeline[98] <= 1'b0;
        delay_pipeline[99] <= 1'b0;
        delay_pipeline[100] <= 1'b0;
        delay_pipeline[101] <= 1'b0;
        delay_pipeline[102] <= 1'b0;
        delay_pipeline[103] <= 1'b0;
        delay_pipeline[104] <= 1'b0;
        delay_pipeline[105] <= 1'b0;
        delay_pipeline[106] <= 1'b0;
        delay_pipeline[107] <= 1'b0;
        delay_pipeline[108] <= 1'b0;
        delay_pipeline[109] <= 1'b0;
        delay_pipeline[110] <= 1'b0;
        delay_pipeline[111] <= 1'b0;
        delay_pipeline[112] <= 1'b0;
        delay_pipeline[113] <= 1'b0;
        delay_pipeline[114] <= 1'b0;
        delay_pipeline[115] <= 1'b0;
        delay_pipeline[116] <= 1'b0;
        delay_pipeline[117] <= 1'b0;
        delay_pipeline[118] <= 1'b0;
        delay_pipeline[119] <= 1'b0;
        delay_pipeline[120] <= 1'b0;
        delay_pipeline[121] <= 1'b0;
        delay_pipeline[122] <= 1'b0;
        delay_pipeline[123] <= 1'b0;
        delay_pipeline[124] <= 1'b0;
        delay_pipeline[125] <= 1'b0;
        delay_pipeline[126] <= 1'b0;
        delay_pipeline[127] <= 1'b0;
        delay_pipeline[128] <= 1'b0;
        delay_pipeline[129] <= 1'b0;
        delay_pipeline[130] <= 1'b0;
        delay_pipeline[131] <= 1'b0;
        delay_pipeline[132] <= 1'b0;
        delay_pipeline[133] <= 1'b0;
        delay_pipeline[134] <= 1'b0;
        delay_pipeline[135] <= 1'b0;
        delay_pipeline[136] <= 1'b0;
        delay_pipeline[137] <= 1'b0;
        delay_pipeline[138] <= 1'b0;
        delay_pipeline[139] <= 1'b0;
        delay_pipeline[140] <= 1'b0;
        delay_pipeline[141] <= 1'b0;
        delay_pipeline[142] <= 1'b0;
        delay_pipeline[143] <= 1'b0;
        delay_pipeline[144] <= 1'b0;
        delay_pipeline[145] <= 1'b0;
        delay_pipeline[146] <= 1'b0;
        delay_pipeline[147] <= 1'b0;
        delay_pipeline[148] <= 1'b0;
        delay_pipeline[149] <= 1'b0;
        delay_pipeline[150] <= 1'b0;
        delay_pipeline[151] <= 1'b0;
        delay_pipeline[152] <= 1'b0;
        delay_pipeline[153] <= 1'b0;
        delay_pipeline[154] <= 1'b0;
        delay_pipeline[155] <= 1'b0;
        delay_pipeline[156] <= 1'b0;
        delay_pipeline[157] <= 1'b0;
        delay_pipeline[158] <= 1'b0;
        delay_pipeline[159] <= 1'b0;
        delay_pipeline[160] <= 1'b0;
        delay_pipeline[161] <= 1'b0;
        delay_pipeline[162] <= 1'b0;
        delay_pipeline[163] <= 1'b0;
        delay_pipeline[164] <= 1'b0;
        delay_pipeline[165] <= 1'b0;
        delay_pipeline[166] <= 1'b0;
        delay_pipeline[167] <= 1'b0;
        delay_pipeline[168] <= 1'b0;
        delay_pipeline[169] <= 1'b0;
        delay_pipeline[170] <= 1'b0;
        delay_pipeline[171] <= 1'b0;
        delay_pipeline[172] <= 1'b0;
        delay_pipeline[173] <= 1'b0;
        delay_pipeline[174] <= 1'b0;
        delay_pipeline[175] <= 1'b0;
        delay_pipeline[176] <= 1'b0;
        delay_pipeline[177] <= 1'b0;
        delay_pipeline[178] <= 1'b0;
        delay_pipeline[179] <= 1'b0;
        delay_pipeline[180] <= 1'b0;
        delay_pipeline[181] <= 1'b0;
        delay_pipeline[182] <= 1'b0;
        delay_pipeline[183] <= 1'b0;
        delay_pipeline[184] <= 1'b0;
        delay_pipeline[185] <= 1'b0;
        delay_pipeline[186] <= 1'b0;
        delay_pipeline[187] <= 1'b0;
        delay_pipeline[188] <= 1'b0;
        delay_pipeline[189] <= 1'b0;
        delay_pipeline[190] <= 1'b0;
        delay_pipeline[191] <= 1'b0;
        delay_pipeline[192] <= 1'b0;
        delay_pipeline[193] <= 1'b0;
        delay_pipeline[194] <= 1'b0;
        delay_pipeline[195] <= 1'b0;
        delay_pipeline[196] <= 1'b0;
        delay_pipeline[197] <= 1'b0;
        delay_pipeline[198] <= 1'b0;
        delay_pipeline[199] <= 1'b0;
        delay_pipeline[200] <= 1'b0;
        delay_pipeline[201] <= 1'b0;
        delay_pipeline[202] <= 1'b0;
        delay_pipeline[203] <= 1'b0;
        delay_pipeline[204] <= 1'b0;
        delay_pipeline[205] <= 1'b0;
        delay_pipeline[206] <= 1'b0;
        delay_pipeline[207] <= 1'b0;
        delay_pipeline[208] <= 1'b0;
        delay_pipeline[209] <= 1'b0;
        delay_pipeline[210] <= 1'b0;
        delay_pipeline[211] <= 1'b0;
        delay_pipeline[212] <= 1'b0;
        delay_pipeline[213] <= 1'b0;
        delay_pipeline[214] <= 1'b0;
        delay_pipeline[215] <= 1'b0;
        delay_pipeline[216] <= 1'b0;
        delay_pipeline[217] <= 1'b0;
        delay_pipeline[218] <= 1'b0;
        delay_pipeline[219] <= 1'b0;
        delay_pipeline[220] <= 1'b0;
        delay_pipeline[221] <= 1'b0;
        delay_pipeline[222] <= 1'b0;
        delay_pipeline[223] <= 1'b0;
        delay_pipeline[224] <= 1'b0;
        delay_pipeline[225] <= 1'b0;
        delay_pipeline[226] <= 1'b0;
        delay_pipeline[227] <= 1'b0;
        delay_pipeline[228] <= 1'b0;
        delay_pipeline[229] <= 1'b0;
        delay_pipeline[230] <= 1'b0;
        delay_pipeline[231] <= 1'b0;
        delay_pipeline[232] <= 1'b0;
        delay_pipeline[233] <= 1'b0;
        delay_pipeline[234] <= 1'b0;
        delay_pipeline[235] <= 1'b0;
        delay_pipeline[236] <= 1'b0;
        delay_pipeline[237] <= 1'b0;
        delay_pipeline[238] <= 1'b0;
        delay_pipeline[239] <= 1'b0;
        delay_pipeline[240] <= 1'b0;
        delay_pipeline[241] <= 1'b0;
        delay_pipeline[242] <= 1'b0;
        delay_pipeline[243] <= 1'b0;
        delay_pipeline[244] <= 1'b0;
        delay_pipeline[245] <= 1'b0;
        delay_pipeline[246] <= 1'b0;
        delay_pipeline[247] <= 1'b0;
        delay_pipeline[248] <= 1'b0;
        delay_pipeline[249] <= 1'b0;
        delay_pipeline[250] <= 1'b0;
        delay_pipeline[251] <= 1'b0;
        delay_pipeline[252] <= 1'b0;
        delay_pipeline[253] <= 1'b0;
        delay_pipeline[254] <= 1'b0;
        delay_pipeline[255] <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= serialoutb1;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
          delay_pipeline[67] <= delay_pipeline[66];
          delay_pipeline[68] <= delay_pipeline[67];
          delay_pipeline[69] <= delay_pipeline[68];
          delay_pipeline[70] <= delay_pipeline[69];
          delay_pipeline[71] <= delay_pipeline[70];
          delay_pipeline[72] <= delay_pipeline[71];
          delay_pipeline[73] <= delay_pipeline[72];
          delay_pipeline[74] <= delay_pipeline[73];
          delay_pipeline[75] <= delay_pipeline[74];
          delay_pipeline[76] <= delay_pipeline[75];
          delay_pipeline[77] <= delay_pipeline[76];
          delay_pipeline[78] <= delay_pipeline[77];
          delay_pipeline[79] <= delay_pipeline[78];
          delay_pipeline[80] <= delay_pipeline[79];
          delay_pipeline[81] <= delay_pipeline[80];
          delay_pipeline[82] <= delay_pipeline[81];
          delay_pipeline[83] <= delay_pipeline[82];
          delay_pipeline[84] <= delay_pipeline[83];
          delay_pipeline[85] <= delay_pipeline[84];
          delay_pipeline[86] <= delay_pipeline[85];
          delay_pipeline[87] <= delay_pipeline[86];
          delay_pipeline[88] <= delay_pipeline[87];
          delay_pipeline[89] <= delay_pipeline[88];
          delay_pipeline[90] <= delay_pipeline[89];
          delay_pipeline[91] <= delay_pipeline[90];
          delay_pipeline[92] <= delay_pipeline[91];
          delay_pipeline[93] <= delay_pipeline[92];
          delay_pipeline[94] <= delay_pipeline[93];
          delay_pipeline[95] <= delay_pipeline[94];
          delay_pipeline[96] <= delay_pipeline[95];
          delay_pipeline[97] <= delay_pipeline[96];
          delay_pipeline[98] <= delay_pipeline[97];
          delay_pipeline[99] <= delay_pipeline[98];
          delay_pipeline[100] <= delay_pipeline[99];
          delay_pipeline[101] <= delay_pipeline[100];
          delay_pipeline[102] <= delay_pipeline[101];
          delay_pipeline[103] <= delay_pipeline[102];
          delay_pipeline[104] <= delay_pipeline[103];
          delay_pipeline[105] <= delay_pipeline[104];
          delay_pipeline[106] <= delay_pipeline[105];
          delay_pipeline[107] <= delay_pipeline[106];
          delay_pipeline[108] <= delay_pipeline[107];
          delay_pipeline[109] <= delay_pipeline[108];
          delay_pipeline[110] <= delay_pipeline[109];
          delay_pipeline[111] <= delay_pipeline[110];
          delay_pipeline[112] <= delay_pipeline[111];
          delay_pipeline[113] <= delay_pipeline[112];
          delay_pipeline[114] <= delay_pipeline[113];
          delay_pipeline[115] <= delay_pipeline[114];
          delay_pipeline[116] <= delay_pipeline[115];
          delay_pipeline[117] <= delay_pipeline[116];
          delay_pipeline[118] <= delay_pipeline[117];
          delay_pipeline[119] <= delay_pipeline[118];
          delay_pipeline[120] <= delay_pipeline[119];
          delay_pipeline[121] <= delay_pipeline[120];
          delay_pipeline[122] <= delay_pipeline[121];
          delay_pipeline[123] <= delay_pipeline[122];
          delay_pipeline[124] <= delay_pipeline[123];
          delay_pipeline[125] <= delay_pipeline[124];
          delay_pipeline[126] <= delay_pipeline[125];
          delay_pipeline[127] <= delay_pipeline[126];
          delay_pipeline[128] <= delay_pipeline[127];
          delay_pipeline[129] <= delay_pipeline[128];
          delay_pipeline[130] <= delay_pipeline[129];
          delay_pipeline[131] <= delay_pipeline[130];
          delay_pipeline[132] <= delay_pipeline[131];
          delay_pipeline[133] <= delay_pipeline[132];
          delay_pipeline[134] <= delay_pipeline[133];
          delay_pipeline[135] <= delay_pipeline[134];
          delay_pipeline[136] <= delay_pipeline[135];
          delay_pipeline[137] <= delay_pipeline[136];
          delay_pipeline[138] <= delay_pipeline[137];
          delay_pipeline[139] <= delay_pipeline[138];
          delay_pipeline[140] <= delay_pipeline[139];
          delay_pipeline[141] <= delay_pipeline[140];
          delay_pipeline[142] <= delay_pipeline[141];
          delay_pipeline[143] <= delay_pipeline[142];
          delay_pipeline[144] <= delay_pipeline[143];
          delay_pipeline[145] <= delay_pipeline[144];
          delay_pipeline[146] <= delay_pipeline[145];
          delay_pipeline[147] <= delay_pipeline[146];
          delay_pipeline[148] <= delay_pipeline[147];
          delay_pipeline[149] <= delay_pipeline[148];
          delay_pipeline[150] <= delay_pipeline[149];
          delay_pipeline[151] <= delay_pipeline[150];
          delay_pipeline[152] <= delay_pipeline[151];
          delay_pipeline[153] <= delay_pipeline[152];
          delay_pipeline[154] <= delay_pipeline[153];
          delay_pipeline[155] <= delay_pipeline[154];
          delay_pipeline[156] <= delay_pipeline[155];
          delay_pipeline[157] <= delay_pipeline[156];
          delay_pipeline[158] <= delay_pipeline[157];
          delay_pipeline[159] <= delay_pipeline[158];
          delay_pipeline[160] <= delay_pipeline[159];
          delay_pipeline[161] <= delay_pipeline[160];
          delay_pipeline[162] <= delay_pipeline[161];
          delay_pipeline[163] <= delay_pipeline[162];
          delay_pipeline[164] <= delay_pipeline[163];
          delay_pipeline[165] <= delay_pipeline[164];
          delay_pipeline[166] <= delay_pipeline[165];
          delay_pipeline[167] <= delay_pipeline[166];
          delay_pipeline[168] <= delay_pipeline[167];
          delay_pipeline[169] <= delay_pipeline[168];
          delay_pipeline[170] <= delay_pipeline[169];
          delay_pipeline[171] <= delay_pipeline[170];
          delay_pipeline[172] <= delay_pipeline[171];
          delay_pipeline[173] <= delay_pipeline[172];
          delay_pipeline[174] <= delay_pipeline[173];
          delay_pipeline[175] <= delay_pipeline[174];
          delay_pipeline[176] <= delay_pipeline[175];
          delay_pipeline[177] <= delay_pipeline[176];
          delay_pipeline[178] <= delay_pipeline[177];
          delay_pipeline[179] <= delay_pipeline[178];
          delay_pipeline[180] <= delay_pipeline[179];
          delay_pipeline[181] <= delay_pipeline[180];
          delay_pipeline[182] <= delay_pipeline[181];
          delay_pipeline[183] <= delay_pipeline[182];
          delay_pipeline[184] <= delay_pipeline[183];
          delay_pipeline[185] <= delay_pipeline[184];
          delay_pipeline[186] <= delay_pipeline[185];
          delay_pipeline[187] <= delay_pipeline[186];
          delay_pipeline[188] <= delay_pipeline[187];
          delay_pipeline[189] <= delay_pipeline[188];
          delay_pipeline[190] <= delay_pipeline[189];
          delay_pipeline[191] <= delay_pipeline[190];
          delay_pipeline[192] <= delay_pipeline[191];
          delay_pipeline[193] <= delay_pipeline[192];
          delay_pipeline[194] <= delay_pipeline[193];
          delay_pipeline[195] <= delay_pipeline[194];
          delay_pipeline[196] <= delay_pipeline[195];
          delay_pipeline[197] <= delay_pipeline[196];
          delay_pipeline[198] <= delay_pipeline[197];
          delay_pipeline[199] <= delay_pipeline[198];
          delay_pipeline[200] <= delay_pipeline[199];
          delay_pipeline[201] <= delay_pipeline[200];
          delay_pipeline[202] <= delay_pipeline[201];
          delay_pipeline[203] <= delay_pipeline[202];
          delay_pipeline[204] <= delay_pipeline[203];
          delay_pipeline[205] <= delay_pipeline[204];
          delay_pipeline[206] <= delay_pipeline[205];
          delay_pipeline[207] <= delay_pipeline[206];
          delay_pipeline[208] <= delay_pipeline[207];
          delay_pipeline[209] <= delay_pipeline[208];
          delay_pipeline[210] <= delay_pipeline[209];
          delay_pipeline[211] <= delay_pipeline[210];
          delay_pipeline[212] <= delay_pipeline[211];
          delay_pipeline[213] <= delay_pipeline[212];
          delay_pipeline[214] <= delay_pipeline[213];
          delay_pipeline[215] <= delay_pipeline[214];
          delay_pipeline[216] <= delay_pipeline[215];
          delay_pipeline[217] <= delay_pipeline[216];
          delay_pipeline[218] <= delay_pipeline[217];
          delay_pipeline[219] <= delay_pipeline[218];
          delay_pipeline[220] <= delay_pipeline[219];
          delay_pipeline[221] <= delay_pipeline[220];
          delay_pipeline[222] <= delay_pipeline[221];
          delay_pipeline[223] <= delay_pipeline[222];
          delay_pipeline[224] <= delay_pipeline[223];
          delay_pipeline[225] <= delay_pipeline[224];
          delay_pipeline[226] <= delay_pipeline[225];
          delay_pipeline[227] <= delay_pipeline[226];
          delay_pipeline[228] <= delay_pipeline[227];
          delay_pipeline[229] <= delay_pipeline[228];
          delay_pipeline[230] <= delay_pipeline[229];
          delay_pipeline[231] <= delay_pipeline[230];
          delay_pipeline[232] <= delay_pipeline[231];
          delay_pipeline[233] <= delay_pipeline[232];
          delay_pipeline[234] <= delay_pipeline[233];
          delay_pipeline[235] <= delay_pipeline[234];
          delay_pipeline[236] <= delay_pipeline[235];
          delay_pipeline[237] <= delay_pipeline[236];
          delay_pipeline[238] <= delay_pipeline[237];
          delay_pipeline[239] <= delay_pipeline[238];
          delay_pipeline[240] <= delay_pipeline[239];
          delay_pipeline[241] <= delay_pipeline[240];
          delay_pipeline[242] <= delay_pipeline[241];
          delay_pipeline[243] <= delay_pipeline[242];
          delay_pipeline[244] <= delay_pipeline[243];
          delay_pipeline[245] <= delay_pipeline[244];
          delay_pipeline[246] <= delay_pipeline[245];
          delay_pipeline[247] <= delay_pipeline[246];
          delay_pipeline[248] <= delay_pipeline[247];
          delay_pipeline[249] <= delay_pipeline[248];
          delay_pipeline[250] <= delay_pipeline[249];
          delay_pipeline[251] <= delay_pipeline[250];
          delay_pipeline[252] <= delay_pipeline[251];
          delay_pipeline[253] <= delay_pipeline[252];
          delay_pipeline[254] <= delay_pipeline[253];
          delay_pipeline[255] <= delay_pipeline[254];
        end
      end
    end // Delay_Pipeline_1_process


  assign mem_addr_1 = {delay_pipeline[79], delay_pipeline[63], delay_pipeline[47], delay_pipeline[31], delay_pipeline[15], serialoutb1};

  always @(mem_addr_1)
  begin
    case(mem_addr_1)
      6'b000000 : memoutb1_1 = 13'b0000000000000;
      6'b000001 : memoutb1_1 = 13'b0000001001000;
      6'b000010 : memoutb1_1 = 13'b1111110101111;
      6'b000011 : memoutb1_1 = 13'b1111111110111;
      6'b000100 : memoutb1_1 = 13'b1110100111100;
      6'b000101 : memoutb1_1 = 13'b1110110000100;
      6'b000110 : memoutb1_1 = 13'b1110011101011;
      6'b000111 : memoutb1_1 = 13'b1110100110011;
      6'b001000 : memoutb1_1 = 13'b1100111001001;
      6'b001001 : memoutb1_1 = 13'b1101000010001;
      6'b001010 : memoutb1_1 = 13'b1100101111000;
      6'b001011 : memoutb1_1 = 13'b1100111000000;
      6'b001100 : memoutb1_1 = 13'b1011100000101;
      6'b001101 : memoutb1_1 = 13'b1011101001101;
      6'b001110 : memoutb1_1 = 13'b1011010110100;
      6'b001111 : memoutb1_1 = 13'b1011011111100;
      6'b010000 : memoutb1_1 = 13'b1100110001000;
      6'b010001 : memoutb1_1 = 13'b1100111010000;
      6'b010010 : memoutb1_1 = 13'b1100100110111;
      6'b010011 : memoutb1_1 = 13'b1100101111111;
      6'b010100 : memoutb1_1 = 13'b1011011000100;
      6'b010101 : memoutb1_1 = 13'b1011100001100;
      6'b010110 : memoutb1_1 = 13'b1011001110011;
      6'b010111 : memoutb1_1 = 13'b1011010111011;
      6'b011000 : memoutb1_1 = 13'b1001101010001;
      6'b011001 : memoutb1_1 = 13'b1001110011001;
      6'b011010 : memoutb1_1 = 13'b1001100000000;
      6'b011011 : memoutb1_1 = 13'b1001101001000;
      6'b011100 : memoutb1_1 = 13'b1000010001101;
      6'b011101 : memoutb1_1 = 13'b1000011010101;
      6'b011110 : memoutb1_1 = 13'b1000000111100;
      6'b011111 : memoutb1_1 = 13'b1000010000100;
      6'b100000 : memoutb1_1 = 13'b0000101010100;
      6'b100001 : memoutb1_1 = 13'b0000110011100;
      6'b100010 : memoutb1_1 = 13'b0000100000011;
      6'b100011 : memoutb1_1 = 13'b0000101001011;
      6'b100100 : memoutb1_1 = 13'b1111010010000;
      6'b100101 : memoutb1_1 = 13'b1111011011000;
      6'b100110 : memoutb1_1 = 13'b1111000111111;
      6'b100111 : memoutb1_1 = 13'b1111010000111;
      6'b101000 : memoutb1_1 = 13'b1101100011101;
      6'b101001 : memoutb1_1 = 13'b1101101100101;
      6'b101010 : memoutb1_1 = 13'b1101011001100;
      6'b101011 : memoutb1_1 = 13'b1101100010100;
      6'b101100 : memoutb1_1 = 13'b1100001011001;
      6'b101101 : memoutb1_1 = 13'b1100010100001;
      6'b101110 : memoutb1_1 = 13'b1100000001000;
      6'b101111 : memoutb1_1 = 13'b1100001010000;
      6'b110000 : memoutb1_1 = 13'b1101011011100;
      6'b110001 : memoutb1_1 = 13'b1101100100100;
      6'b110010 : memoutb1_1 = 13'b1101010001011;
      6'b110011 : memoutb1_1 = 13'b1101011010011;
      6'b110100 : memoutb1_1 = 13'b1100000011000;
      6'b110101 : memoutb1_1 = 13'b1100001100000;
      6'b110110 : memoutb1_1 = 13'b1011111000111;
      6'b110111 : memoutb1_1 = 13'b1100000001111;
      6'b111000 : memoutb1_1 = 13'b1010010100101;
      6'b111001 : memoutb1_1 = 13'b1010011101101;
      6'b111010 : memoutb1_1 = 13'b1010001010100;
      6'b111011 : memoutb1_1 = 13'b1010010011100;
      6'b111100 : memoutb1_1 = 13'b1000111100001;
      6'b111101 : memoutb1_1 = 13'b1001000101001;
      6'b111110 : memoutb1_1 = 13'b1000110010000;
      6'b111111 : memoutb1_1 = 13'b1000111011000;
      default : memoutb1_1 = 13'b1000111011000;
    endcase
  end

  assign mem_addr_2 = {delay_pipeline[175], delay_pipeline[159], delay_pipeline[143], delay_pipeline[127], delay_pipeline[111], delay_pipeline[95]};

  always @(mem_addr_2)
  begin
    case(mem_addr_2)
      6'b000000 : memoutb1_2 = 17'b00000000000000000;
      6'b000001 : memoutb1_2 = 17'b00001000101000001;
      6'b000010 : memoutb1_2 = 17'b00010000111111000;
      6'b000011 : memoutb1_2 = 17'b00011001100111001;
      6'b000100 : memoutb1_2 = 17'b00010100100101001;
      6'b000101 : memoutb1_2 = 17'b00011101001101010;
      6'b000110 : memoutb1_2 = 17'b00100101100100001;
      6'b000111 : memoutb1_2 = 17'b00101110001100010;
      6'b001000 : memoutb1_2 = 17'b00010000111111000;
      6'b001001 : memoutb1_2 = 17'b00011001100111001;
      6'b001010 : memoutb1_2 = 17'b00100001111110000;
      6'b001011 : memoutb1_2 = 17'b00101010100110001;
      6'b001100 : memoutb1_2 = 17'b00100101100100001;
      6'b001101 : memoutb1_2 = 17'b00101110001100010;
      6'b001110 : memoutb1_2 = 17'b00110110100011001;
      6'b001111 : memoutb1_2 = 17'b00111111001011010;
      6'b010000 : memoutb1_2 = 17'b00001000101000001;
      6'b010001 : memoutb1_2 = 17'b00010001010000010;
      6'b010010 : memoutb1_2 = 17'b00011001100111001;
      6'b010011 : memoutb1_2 = 17'b00100010001111010;
      6'b010100 : memoutb1_2 = 17'b00011101001101010;
      6'b010101 : memoutb1_2 = 17'b00100101110101011;
      6'b010110 : memoutb1_2 = 17'b00101110001100010;
      6'b010111 : memoutb1_2 = 17'b00110110110100011;
      6'b011000 : memoutb1_2 = 17'b00011001100111001;
      6'b011001 : memoutb1_2 = 17'b00100010001111010;
      6'b011010 : memoutb1_2 = 17'b00101010100110001;
      6'b011011 : memoutb1_2 = 17'b00110011001110010;
      6'b011100 : memoutb1_2 = 17'b00101110001100010;
      6'b011101 : memoutb1_2 = 17'b00110110110100011;
      6'b011110 : memoutb1_2 = 17'b00111111001011010;
      6'b011111 : memoutb1_2 = 17'b01000111110011011;
      6'b100000 : memoutb1_2 = 17'b00000000101010100;
      6'b100001 : memoutb1_2 = 17'b00001001010010101;
      6'b100010 : memoutb1_2 = 17'b00010001101001100;
      6'b100011 : memoutb1_2 = 17'b00011010010001101;
      6'b100100 : memoutb1_2 = 17'b00010101001111101;
      6'b100101 : memoutb1_2 = 17'b00011101110111110;
      6'b100110 : memoutb1_2 = 17'b00100110001110101;
      6'b100111 : memoutb1_2 = 17'b00101110110110110;
      6'b101000 : memoutb1_2 = 17'b00010001101001100;
      6'b101001 : memoutb1_2 = 17'b00011010010001101;
      6'b101010 : memoutb1_2 = 17'b00100010101000100;
      6'b101011 : memoutb1_2 = 17'b00101011010000101;
      6'b101100 : memoutb1_2 = 17'b00100110001110101;
      6'b101101 : memoutb1_2 = 17'b00101110110110110;
      6'b101110 : memoutb1_2 = 17'b00110111001101101;
      6'b101111 : memoutb1_2 = 17'b00111111110101110;
      6'b110000 : memoutb1_2 = 17'b00001001010010101;
      6'b110001 : memoutb1_2 = 17'b00010001111010110;
      6'b110010 : memoutb1_2 = 17'b00011010010001101;
      6'b110011 : memoutb1_2 = 17'b00100010111001110;
      6'b110100 : memoutb1_2 = 17'b00011101110111110;
      6'b110101 : memoutb1_2 = 17'b00100110011111111;
      6'b110110 : memoutb1_2 = 17'b00101110110110110;
      6'b110111 : memoutb1_2 = 17'b00110111011110111;
      6'b111000 : memoutb1_2 = 17'b00011010010001101;
      6'b111001 : memoutb1_2 = 17'b00100010111001110;
      6'b111010 : memoutb1_2 = 17'b00101011010000101;
      6'b111011 : memoutb1_2 = 17'b00110011111000110;
      6'b111100 : memoutb1_2 = 17'b00101110110110110;
      6'b111101 : memoutb1_2 = 17'b00110111011110111;
      6'b111110 : memoutb1_2 = 17'b00111111110101110;
      6'b111111 : memoutb1_2 = 17'b01001000011101111;
      default : memoutb1_2 = 17'b01001000011101111;
    endcase
  end

  assign mem_addr_3 = {delay_pipeline[255], delay_pipeline[239], delay_pipeline[223], delay_pipeline[207], delay_pipeline[191]};

  always @(mem_addr_3)
  begin
    case(mem_addr_3)
      5'b00000 : memoutb1_3 = 13'b0000000000000;
      5'b00001 : memoutb1_3 = 13'b1100110001000;
      5'b00010 : memoutb1_3 = 13'b1100111001001;
      5'b00011 : memoutb1_3 = 13'b1001101010001;
      5'b00100 : memoutb1_3 = 13'b1110100111100;
      5'b00101 : memoutb1_3 = 13'b1011011000100;
      5'b00110 : memoutb1_3 = 13'b1011100000101;
      5'b00111 : memoutb1_3 = 13'b1000010001101;
      5'b01000 : memoutb1_3 = 13'b1111110101111;
      5'b01001 : memoutb1_3 = 13'b1100100110111;
      5'b01010 : memoutb1_3 = 13'b1100101111000;
      5'b01011 : memoutb1_3 = 13'b1001100000000;
      5'b01100 : memoutb1_3 = 13'b1110011101011;
      5'b01101 : memoutb1_3 = 13'b1011001110011;
      5'b01110 : memoutb1_3 = 13'b1011010110100;
      5'b01111 : memoutb1_3 = 13'b1000000111100;
      5'b10000 : memoutb1_3 = 13'b0000001001000;
      5'b10001 : memoutb1_3 = 13'b1100111010000;
      5'b10010 : memoutb1_3 = 13'b1101000010001;
      5'b10011 : memoutb1_3 = 13'b1001110011001;
      5'b10100 : memoutb1_3 = 13'b1110110000100;
      5'b10101 : memoutb1_3 = 13'b1011100001100;
      5'b10110 : memoutb1_3 = 13'b1011101001101;
      5'b10111 : memoutb1_3 = 13'b1000011010101;
      5'b11000 : memoutb1_3 = 13'b1111111110111;
      5'b11001 : memoutb1_3 = 13'b1100101111111;
      5'b11010 : memoutb1_3 = 13'b1100111000000;
      5'b11011 : memoutb1_3 = 13'b1001101001000;
      5'b11100 : memoutb1_3 = 13'b1110100110011;
      5'b11101 : memoutb1_3 = 13'b1011010111011;
      5'b11110 : memoutb1_3 = 13'b1011011111100;
      5'b11111 : memoutb1_3 = 13'b1000010000100;
      default : memoutb1_3 = 13'b1000010000100;
    endcase
  end

  assign add_signext = $signed({{4{memoutb1_1[12]}}, memoutb1_1});
  assign add_signext_1 = memoutb1_2;
  assign sum1_1 = add_signext + add_signext_1;

  assign add_signext_2 = sum1_1;
  assign add_signext_3 = $signed({{5{memoutb1_3[12]}}, memoutb1_3});
  assign sum2_1 = add_signext_2 + add_signext_3;

  assign memoutb1 = sum2_1[16:0];

  //  Shift and add the LUT results to compute the scaled accumulated sum

  assign memoutb1_cast = $signed({memoutb1[16:0], 15'b000000000000000});

  assign acc_out_shft = $signed({{1{acc_out[32]}}, acc_out[32:1]});

  assign add_signext_4 = acc_out_shft;
  assign add_signext_5 = memoutb1_cast;
  assign add_temp = add_signext_4 + add_signext_5;
  assign addsub_add = add_temp[32:0];

  assign sub_signext = acc_out_shft;
  assign sub_signext_1 = memoutb1_cast;
  assign sub_temp = sub_signext - sub_signext_1;
  assign addsub_sub = sub_temp[32:0];

  assign add_sub_out = (phase_15 == 1'b1) ? addsub_sub :
                      addsub_add;

  assign acc_in = (phase_0 == 1'b1) ? memoutb1_cast :
            add_sub_out;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        acc_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out <= acc_in;
        end
      end
    end // Acc_reg_process

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        final_acc_out <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          final_acc_out <= acc_out;
        end
      end
    end // Finalsum_reg_process

  assign output_da = final_acc_out;

  assign output_typeconvert = output_da[31:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_15 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter_da
